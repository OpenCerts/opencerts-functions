service: storage
provider:
  name: aws
  apiKeys: 
    - ${self:provider.stage}-storage-api-key
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  memorySize: 256
  timeout: 30 # downstream things take a long time
  tracing:
    lambda: true
    apiGateway: true
  logs:
    restApi: true
  environment:
    BUCKET_NAME: '${self:custom.BUCKET_NAME}'
    OBJECT_TTL: '${self:custom.OBJECT_TTL}'
    S3_REGION: ${self:provider.region}
  iamRoleStatements:
    -
      Effect: Allow
      Action: ['s3:putObject', 's3:upload', 's3:deleteObject', 's3:getObject']
      Resource:
        -  "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : 'DeployedBucket' }, "/*" ] ]
resources:
  Resources:
    DeployedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.BUCKET_NAME}'
        LifecycleConfiguration:
            Rules:
              -
                ExpirationInDays: ${self:custom.OBJECT_TTL}
                Prefix: '/'
                Status: Enabled
functions:
    get:
      handler: index.getHandler
      events:
        - http: 
            path: '/{id}' 
            method: get 
            request: 
              parameters: 
                paths: 
                  id: true
            cors: true
    
    createAtId:
      handler: index.createAtIdHandler
      events:
        - http: 
            path: '/{id}'
            method: post  
            request: 
              parameters: 
                paths: 
                  id: true
            private: ${self:custom.ENABLE_STORAGE_UPLOAD_API_KEY}
            cors: true

    create:
      handler: index.createHandler
      events:
        - http: 
            path: / 
            method: post
            cors: true
            private: ${self:custom.ENABLE_STORAGE_UPLOAD_API_KEY}

    getQueueNumber:
      handler: index.queueNumberHandler
      events:
        - http: 
            path: /queue
            method: get
            cors: true
            private: ${self:custom.ENABLE_STORAGE_UPLOAD_API_KEY}


custom:
  s3:
    port: 8000
    directory: /tmp
  BUCKET_NAME: ${env:BUCKET_NAME, "oc-functions-storage"}-${self:provider.stage}
  ENABLE_STORAGE_UPLOAD_API_KEY: ${strToBool(${env:ENABLE_STORAGE_UPLOAD_API_KEY, 'false'})}
  OBJECT_TTL: ${env:OBJECT_TTL, 31} # Object TTL in days
  dotenv:
    path: ../../
  serverless-offline:
    lambdaPort: 5002
    httpPort: 5000
  isManagedDomain: 
    false: 'true' # To negate the environment variable DISABLE_DOMAIN
    true: 'false' # if you know of a way to do conditionals please change this
  customDomain:
    domainName: "${env:DOMAIN, 'dev'}" # Change this to your domain.
    basePath: "storage" # This will be prefixed to all routes
    stage: ${self:provider.stage}
    certificateName: "${env:CERTIFICATE_DOMAIN, 'dev'}"
    createRoute53Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2
    enabled: ${strToBool(${self:custom.isManagedDomain.${env:DISABLE_DOMAIN, 'false'}})}
  webpack:
    includeModules:
      packagePath: "../../package.json"
  enableBucketDeletionPrompt:
    prod: true # we don't want these buckets in these stages to be deleted without a prompt
    stg: true
  remover:
    buckets:
      - ${self:custom.BUCKET_NAME}
    prompt:
      ${self:custom.disableBucketDeletingPrompt.${self:provider.stage}, false}

plugins:
  - serverless-dotenv-plugin
  - serverless-s3-local
  - serverless-s3-remover
  - serverless-offline
  - serverless-domain-manager
  - serverless-webpack
